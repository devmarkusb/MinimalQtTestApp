name: build-android

on: push

jobs:
  build:
    strategy:
      matrix:
        build_type: [RelWithDebInfo]
        config:
          - {os: self-hosted, qtcomp: android}

    env:
      qt_version: 5.15.2
      ANDROID_SDK: $ANDROID_SDK_ROOT

    # The CMake configure and build commands are platform-agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest #${{matrix.config.os}}

    # The token below is a workaround I searched for a long time,
    # https://github.com/actions/checkout/issues/116#issuecomment-644419389
    # As long as you can't just succeed cloning submodules that a private repos.
    # 1. Make a private access token (PAT): https://github.com/settings/tokens
    # 2. Add a secret PRIVATE_SUBMODULE_PAT with that token:
    # https://github.com/devmarkusb/MinimalQtTestApp/settings/secrets/actions
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{secrets.PRIVATE_SUBMODULE_PAT}}
        submodules: recursive

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2' #todo can't get $qt_version working
        target: 'android'
        arch: ''
        dir: '${{github.workspace}}/externlibs/qt/'
        install-deps: 'true'
        modules: ''
        archives: ''
        cache: 'false'
        cache-key-prefix: 'install-qt-action'
        setup-python: 'false'
        tools: ''
        set-env: 'true'
        tools-only: 'false'
        #aqtversion: '==2.1.*'
        #py7zrversion: '==0.19.*'
        #extra: '--external 7z'

    - name: Patch Qt
      run: >
        cp ${{github.workspace}}/.github/workflows/Qt5AndroidSupport.cmake
        ${{github.workspace}}/externlibs/qt/Qt/$qt_version/android/lib/cmake/Qt5Core/Qt5AndroidSupport.cmake

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DUL_QT_BASE:STRING=${{github.workspace}}/externlibs/qt/Qt
        -DUL_QT5_VERSION:STRING=$qt_version -DUL_QT_COMPILER_SUBDIR:STRING=${{matrix.config.qtcomp}}
        -DANDROID_STL="c++_shared" -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=21
        -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}
